{"version":3,"sources":["webpack:///./src/templates/index-page.js","webpack:///./src/components/Features.js","webpack:///./src/components/BlogRoll.js"],"names":["__webpack_require__","r","__webpack_exports__","d","IndexPageTemplate","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","_components_Layout__WEBPACK_IMPORTED_MODULE_3__","_components_Features__WEBPACK_IMPORTED_MODULE_4__","_components_BlogRoll__WEBPACK_IMPORTED_MODULE_5__","_ref","image","title","heading","subheading","mainpitch","description","intro","a","createElement","className","style","backgroundImage","childImageSharp","fluid","src","backgroundPosition","backgroundAttachment","display","height","lineHeight","justifyContent","alignItems","flexDirection","gridItems","blurbs","to","propTypes","PropTypes","oneOfType","object","string","shape","array","IndexPage","_ref2","frontmatter","data","markdownRemark","languageKey","_components_PreviewCompatibleImage__WEBPACK_IMPORTED_MODULE_2__","FeatureGrid","map","item","key","text","width","imageInfo","arrayOf","BlogRoll","render","posts","this","props","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_2___default","post","node","id","featuredpost","featuredimage","_PreviewCompatibleImage__WEBPACK_IMPORTED_MODULE_5__","alt","gatsby__WEBPACK_IMPORTED_MODULE_4__","fields","slug","date","excerpt","React","Component","query","count","_public_static_d_3722544792_json__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"component---src-templates-index-page-js-ce58bce7c64d266f06e0.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport Features from '../components/Features'\nimport BlogRoll from '../components/BlogRoll'\n\nexport const IndexPageTemplate = ({\n  image,\n  title,\n  heading,\n  subheading,\n  mainpitch,\n  description,\n  intro,\n}) => (\n  <div>\n    <div\n      className=\"full-width-image margin-top-0\"\n      style={{\n        backgroundImage: `url(${\n          !!image.childImageSharp ? image.childImageSharp.fluid.src : image\n        })`,\n        backgroundPosition: `top left`,\n        backgroundAttachment: `fixed`,\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          height: '150px',\n          lineHeight: '1',\n          justifyContent: 'space-around',\n          alignItems: 'left',\n          flexDirection: 'column',\n        }}\n      >\n        <h1 \n          className=\"home-title has-text-weight-bold is-size-3-mobile is-size-2-tablet is-size-1-widescreen\">\n          {title}\n        </h1>\n        <h3\n          className=\"home-title has-text-weight-bold is-size-5-mobile is-size-5-tablet is-size-4-widescreen\">\n          {subheading}\n        </h3>\n      </div>\n    </div>\n    <section className=\"section section--gradient\">\n      <div className=\"container\">\n        <div className=\"section\">\n          <div className=\"columns\">\n            <div className=\"column is-10 is-offset-1\">\n              <div className=\"content\">\n                <div className=\"content\">\n                  <div className=\"tile\">\n                    <h1 className=\"title\">{mainpitch.title}</h1>\n                  </div>\n                  <div className=\"tile\">\n                    <h3 className=\"subtitle\">{mainpitch.description}</h3>\n                  </div>\n                </div>\n                <div className=\"columns\">\n                  <div className=\"column is-12\">\n                    <h3 className=\"has-text-weight-semibold is-size-2\">\n                      {heading}\n                    </h3>\n                    <p>{description}</p>\n                  </div>\n                </div>\n                <Features gridItems={intro.blurbs} />\n                <div className=\"columns\">\n                  <div className=\"column is-12 has-text-centered\">\n                    <Link className=\"btn\" to=\"/events\">\n                      See all events\n                    </Link>\n                  </div>\n                </div>\n                <div className=\"column is-12\">\n                  <h3 className=\"has-text-weight-semibold is-size-2\">\n                    Latest stories\n                  </h3>\n                  <BlogRoll />\n                  <div className=\"column is-12 has-text-centered\">\n                    <Link className=\"btn\" to=\"/blog\">\n                      Read more\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </div>\n)\n\nIndexPageTemplate.propTypes = {\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  title: PropTypes.string,\n  heading: PropTypes.string,\n  subheading: PropTypes.string,\n  mainpitch: PropTypes.object,\n  description: PropTypes.string,\n  intro: PropTypes.shape({\n    blurbs: PropTypes.array,\n  }),\n}\n\nconst IndexPage = ({ data }) => {\n  const { frontmatter } = data.markdownRemark\n\n  return (\n    <Layout languageKey={frontmatter.languageKey}>\n      <IndexPageTemplate\n        image={frontmatter.image}\n        title={frontmatter.title}\n        heading={frontmatter.heading}\n        subheading={frontmatter.subheading}\n        mainpitch={frontmatter.mainpitch}\n        description={frontmatter.description}\n        intro={frontmatter.intro}\n      />\n    </Layout>\n  )\n}\n\nIndexPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.object,\n    }),\n  }),\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query IndexPageTemplate($languageKey: String!) {\n    markdownRemark(frontmatter: { \n          templateKey: { eq: \"index-page\" }\n          languageKey: { eq: $languageKey }\n        }) {\n      frontmatter {\n        title\n        languageKey\n        image {\n          childImageSharp {\n            fluid(maxWidth: 2048, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        heading\n        subheading\n        mainpitch {\n          title\n          description\n        }\n        description\n        intro {\n          blurbs {\n            image {\n              childImageSharp {\n                fluid(maxWidth: 240, quality: 64) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            text\n          }\n          heading\n          description\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\n\nconst FeatureGrid = ({ gridItems }) => (\n  <div className=\"columns is-multiline\">\n    {gridItems.map(item => (\n      <div key={item.text} className=\"column is-6\">\n        <section className=\"section\">\n          <div className=\"has-text-centered\">\n            <div\n              style={{\n                width: '240px',\n                display: 'inline-block',\n              }}\n            >\n              <PreviewCompatibleImage imageInfo={item} />\n            </div>\n          </div>\n          <p>{item.text}</p>\n        </section>\n      </div>\n    ))}\n  </div>\n)\n\nFeatureGrid.propTypes = {\n  gridItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n      text: PropTypes.string,\n    })\n  ),\n}\n\nexport default FeatureGrid\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql, StaticQuery } from 'gatsby'\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\n\nclass BlogRoll extends React.Component {\n  render() {\n    const { data } = this.props\n    const { edges: posts } = data.allMarkdownRemark\n\n    return (\n      <div className=\"columns is-multiline\">\n        {posts &&\n          posts.map(({ node: post }) => (\n            <div className=\"is-parent column is-6\" key={post.id}>\n              <article\n                className={`blog-list-item tile is-child box notification ${\n                  post.frontmatter.featuredpost ? 'is-featured' : ''\n                }`}\n              >\n                <header>\n                  {post.frontmatter.featuredimage ? (\n                    <div className=\"featured-thumbnail\">\n                      <PreviewCompatibleImage\n                        imageInfo={{\n                          image: post.frontmatter.featuredimage,\n                          alt: `featured image thumbnail for post ${\n                            post.title\n                          }`,\n                        }}\n                      />\n                    </div>\n                  ) : null}\n                  <p className=\"post-meta\">\n                    <Link\n                      className=\"title has-text-primary is-size-4\"\n                      to={post.fields.slug}\n                    >\n                      {post.frontmatter.title}\n                    </Link>\n                    <span> &bull; </span>\n                    <span className=\"subtitle is-size-5 is-block\">\n                      {post.frontmatter.date}\n                    </span>\n                  </p>\n                </header>\n                <p>\n                  {post.excerpt}\n                  <br />\n                  <br />\n                  <Link className=\"button\" to={post.fields.slug}>\n                    Keep Reading →\n                  </Link>\n                </p>\n              </article>\n            </div>\n          ))}\n      </div>\n    )\n  }\n}\n\nBlogRoll.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.array,\n    }),\n  }),\n}\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      query BlogRollQuery {\n        allMarkdownRemark(\n          sort: { order: DESC, fields: [frontmatter___date] }\n          filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\n        ) {\n          edges {\n            node {\n              excerpt(pruneLength: 400)\n              id\n              fields {\n                slug\n              }\n              frontmatter {\n                title\n                templateKey\n                date(formatString: \"MMMM DD, YYYY\")\n                featuredpost\n                featuredimage {\n                  childImageSharp {\n                    fluid(maxWidth: 120, quality: 100) {\n                      ...GatsbyImageSharpFluid\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={(data, count) => <BlogRoll data={data} count={count} />}\n  />\n)\n"],"sourceRoot":""}